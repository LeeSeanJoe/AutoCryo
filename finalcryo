import tkinter as tk
from tkinter import messagebox
import serial.tools.list_ports
import requests
from datetime import datetime, timedelta
from simple_pid import PID

# Function to get all available COM ports, prioritize those with devices connected
def get_com_ports():
    ports = list(serial.tools.list_ports.comports())
    connected_ports = [port.device for port in ports if port.hwid != 'n/a']  # Ports with devices connected
    disconnected_ports = [port.device for port in ports if port.hwid == 'n/a']  # Ports without devices connected
    return connected_ports + disconnected_ports  # Prioritize connected ports

# Function to enable DG and DPC controls
def enable_dpc_dg_controls():
    for widget in dpc_dg_controls:
        widget.config(state='normal')

# Function to enable Lakeshore controls
def enable_lakeshore_controls():
    for widget in lakeshore_controls:
        widget.config(state='normal')

# Function to connect to Breakout Box
def connect_breakout_box():
    selected_port = breakout_box_com_port.get()
    try:
        global ser_dpc
        ser_dpc = serial.Serial(selected_port, baudrate=19200, timeout=1)
        breakout_box_com_port_dropdown.config(fg='black')  # Change text color to black after connection
        enable_dpc_dg_controls()
        messagebox.showinfo("Connection", f"Connected to Breakout Box on {selected_port}")
    except Exception as e:
        messagebox.showerror("Connection Error", f"Failed to connect to Breakout Box: {e}")
        ser_dpc = None

# Function to connect to Lakeshore
def connect_lakeshore():
    selected_port = lakeshore_com_port.get()
    try:
        global lakeshore
        lakeshore = serial.Serial(selected_port, baudrate=19200, timeout=1)
        lakeshore_com_port_dropdown.config(fg='black')  # Change text color to black after connection
        enable_lakeshore_controls()
        messagebox.showinfo("Connection", f"Connected to Lakeshore on {selected_port}")
    except Exception as e:
        messagebox.showerror("Connection Error", f"Failed to connect to Lakeshore: {e}")
        lakeshore = None

# Function to update the list of available COM ports in the dropdowns
def update_com_ports():
    ports = get_com_ports()
    breakout_box_com_port_dropdown['menu'].delete(0, 'end')
    lakeshore_com_port_dropdown['menu'].delete(0, 'end')
    for port in ports:
        breakout_box_com_port_dropdown['menu'].add_command(label=port, command=tk._setit(breakout_box_com_port, port))
        lakeshore_com_port_dropdown['menu'].add_command(label=port, command=tk._setit(lakeshore_com_port, port))
    breakout_box_com_port.set(ports[0] if ports else "")
    lakeshore_com_port.set(ports[0] if ports else "")

# Set up the PID Controller for DPC
default_kp = 1.0
default_ki = 0.1
default_kd = 0.05
default_setpoint = 50.0
default_reading_interval = 3600  # Default pressure reading frequency (1 hour in seconds)

pid = PID(default_kp, default_ki, default_kd, setpoint=default_setpoint)
pid.output_limits = (0, 100)  # Limits for the setpoint adjustment, adjust as necessary

# Tkinter GUI
root = tk.Tk()
root.title("Integrated Device Control")

# Variables for COM ports
breakout_box_com_port = tk.StringVar()
lakeshore_com_port = tk.StringVar()

# Variables for DG
desired_setpoint = 20.0  # Default setpoint
reading_interval = 3600  # Default reading interval (1 hour in seconds)
default_warning_limit = 350
default_shutdown_limit = 300

# Variables for PID parameters, setpoint, and reading frequency for DPC
kp_var = tk.DoubleVar(value=default_kp)
ki_var = tk.DoubleVar(value=default_ki)
kd_var = tk.DoubleVar(value=default_kd)
setpoint_var = tk.DoubleVar(value=default_setpoint)
reading_interval_var = tk.IntVar(value=default_reading_interval)
current_pressure_var = tk.StringVar(value="N/A")

# Variables for DG warning and shutdown limits
warning_limit_var = tk.IntVar(value=default_warning_limit)
shutdown_limit_var = tk.IntVar(value=default_shutdown_limit)

# Variables for Lakeshore
current_temp_var = tk.StringVar(value="N/A")
default_temp_interval = 3600
update_interval_var = tk.IntVar(value=default_temp_interval)

# Function to update PID parameters and reading frequency
def update_settings():
    global desired_setpoint, reading_interval
    desired_setpoint = float(setpoint_var.get())
    reading_interval = int(reading_interval_var.get())
    kp = kp_var.get()
    ki = ki_var.get()
    kd = kd_var.get()
    setpoint = setpoint_var.get()
    pid.tunings = (kp, ki, kd)
    pid.setpoint = setpoint
    print(f"Updated PID values: Kp={kp}, Ki={ki}, Kd={kd}, Setpoint={setpoint}")
    root.after_cancel(read_pressure_handle)  # Cancel the previous after call
    read_pressure()  # Start with the new interval

# Function to read pressure and update GUI
def read_pressure():
    global read_pressure_handle
    current_pressure = read_current_pressure()
    
    if current_pressure is not None:
        current_pressure_var.set(f"{current_pressure:.2f} psi")
        
        # Calculate the difference between the current pressure and the desired setpoint
        pressure_difference = current_pressure - desired_setpoint
        
        # Adjust the setpoint based on the pressure difference
        adjusted_setpoint = desired_setpoint - pressure_difference * 0.1  # Example adjustment
        
        # Update the PID controller with the new adjusted setpoint
        pid.setpoint = adjusted_setpoint
        
        # Calculate the new control value from the PID
        control_value = pid(current_pressure)
        
        # Apply the control value, for example, controlling an aperture
        set_pressure_setpoint(control_value)
        
        print(f"Current Pressure: {current_pressure} psi, Adjusted Setpoint: {adjusted_setpoint}, Control Value: {control_value}")
        
        # Log the pressure, setpoint, and control value
        save_pressure_data(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')},{current_pressure},{adjusted_setpoint},{control_value}")
    
    # Schedule the next pressure reading
    read_pressure_handle = root.after(reading_interval_var.get() * 1000, read_pressure)

# Function to update temperature
def update_temperature():
    global update_temperature_handle
    temp = read_temperature()
    if temp is not None:
        current_temp_var.set(f"{temp:.2f} K")
        save_temperature_data(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')},{temp:.2f}")
    update_temperature_handle = root.after(update_interval_var.get() * 1000, update_temperature)

# Function to update the interval for temperature reading
def update_temp_interval():
    global update_temperature_handle
    interval = update_interval_var.get()
    print(f"Update interval set to {interval} seconds")
    root.after_cancel(update_temperature_handle)
    update_temperature()

# Function to save pressure data to file
def save_pressure_data(data):
    with open('pressure_data.csv', 'a') as file:
        file.write(data + '\n')
    trim_old_pressure_data()

# Function to save temperature data to file
def save_temperature_data(data):
    with open('temperature_data.csv', 'a') as file:
        file.write(data + '\n')
    trim_old_temp_data()

# Function to trim old pressure data to keep only the last 4 hours
def trim_old_pressure_data():
    cutoff_time = datetime.now() - timedelta(hours=4)
    with open('pressure_data.csv', 'r') as file:
        lines = file.readlines()
    with open('pressure_data.csv', 'w') as file:
        for line in lines:
            line_time = datetime.strptime(line.split(',')[0], '%Y-%m-%d %H:%M:%S')
            if line_time > cutoff_time:
                file.write(line)

# Function to trim old temperature data to keep only the last 4 hours
def trim_old_temp_data():
    cutoff_time = datetime.now() - timedelta(hours=4)
    with open('temperature_data.csv', 'r') as file:
        lines = file.readlines()
    with open('temperature_data.csv', 'w') as file:
        for line in lines:
            line_time = datetime.strptime(line.split(',')[0], '%Y-%m-%d %H:%M:%S')
            if line_time > cutoff_time:
                file.write(line)

# Function to start streaming pressure data
def start_streaming():
    global streaming
    if ser_dpc:
        ser_dpc.write(b'A@ @\n')  # Start streaming on device with address 'A'
        streaming = True
        read_pressure_stream()

# Function to stop streaming pressure data
def stop_streaming():
    global streaming
    if ser_dpc:
        ser_dpc.write(b'@@ A\n')  # Stop streaming and assign unit ID 'A'
        streaming = False

# Function to set the streaming interval for pressure data
def set_streaming_interval(interval_s):
    if ser_dpc:
        interval_ms = interval_s * 1000
        command = f'ANCS {interval_ms}\n'  # Set the streaming interval for device 'A'
        ser_dpc.write(command.encode('ascii'))

# Function to read streaming pressure data
def read_pressure_stream():
    if streaming:
        try:
            pressure_data = ser_dpc.readline().decode('ascii').strip()
            if pressure_data:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                formatted_reading = f"{timestamp},{pressure_data},{desired_setpoint}"
                save_pressure_data(formatted_reading)
                send_to_arduino(f"http://<arduino_ip>/pressure?value={pressure_data}")
        except (serial.SerialException, AttributeError) as e:
            print(f"Error reading pressure: {e}")

        root.after(reading_interval_var.get() * 1000, read_pressure_stream)  # Schedule the next reading in seconds

# Function to send data to Arduino
def send_to_arduino(url):
    try:
        requests.get(url)
    except requests.RequestException as e:
        print(f"Failed to send data to Arduino: {e}")

# Create COM port dropdowns
breakout_box_com_port_dropdown = tk.OptionMenu(root, breakout_box_com_port, "")
lakeshore_com_port_dropdown = tk.OptionMenu(root, lakeshore_com_port, "")

# Labels and dropdowns for Breakout Box and Lakeshore
tk.Label(root, text="Breakout Box:").grid(row=0, column=0, sticky="e")
breakout_box_com_port_dropdown.grid(row=0, column=1)
tk.Button(root, text="CONNECT", command=connect_breakout_box).grid(row=0, column=2)

tk.Label(root, text="Lakeshore:").grid(row=1, column=0, sticky="e")
lakeshore_com_port_dropdown.grid(row=1, column=1)
tk.Button(root, text="CONNECT", command=connect_lakeshore).grid(row=1, column=2)

# Placeholder for DG and DPC below the Breakout Box section
tk.Label(root, text="DG and DPC Control:").grid(row=2, column=0, columnspan=3)

# Create UI components for DG (Digital Gauge) and DPC (Digital Pressure Controller)
dpc_dg_controls = []
dpc_dg_controls.append(tk.Label(root, text="Desired Setpoint (psi):"))
dpc_dg_controls[-1].grid(row=3, column=0, sticky="e")
dpc_dg_controls.append(tk.Entry(root, textvariable=setpoint_var, state='disabled'))
dpc_dg_controls[-1].grid(row=3, column=1)

dpc_dg_controls.append(tk.Label(root, text="Reading Interval (s):"))
dpc_dg_controls[-1].grid(row=4, column=0, sticky="e")
dpc_dg_controls.append(tk.Entry(root, textvariable=reading_interval_var, state='disabled'))
dpc_dg_controls[-1].grid(row=4, column=1)

dpc_dg_controls.append(tk.Label(root, text="Warning Limit (psi):"))
dpc_dg_controls[-1].grid(row=5, column=0, sticky="e")
dpc_dg_controls.append(tk.Entry(root, textvariable=warning_limit_var, state='disabled'))
dpc_dg_controls[-1].grid(row=5, column=1)

dpc_dg_controls.append(tk.Label(root, text="Shutdown Limit (psi):"))
dpc_dg_controls[-1].grid(row=6, column=0, sticky="e")
dpc_dg_controls.append(tk.Entry(root, textvariable=shutdown_limit_var, state='disabled'))
dpc_dg_controls[-1].grid(row=6, column=1)

dpc_dg_controls.append(tk.Label(root, text="Current Pressure:"))
dpc_dg_controls[-1].grid(row=7, column=0, sticky="e")
dpc_dg_controls.append(tk.Label(root, textvariable=current_pressure_var, state='disabled'))
dpc_dg_controls[-1].grid(row=7, column=1)

tk.Button(root, text="Update Settings", command=update_settings, state='disabled').grid(row=8, column=0, columnspan=2)
tk.Button(root, text="Start Streaming", command=start_streaming, state='disabled').grid(row=9, column=0, columnspan=2)
tk.Button(root, text="Stop Streaming", command=stop_streaming, state='disabled').grid(row=10, column=0, columnspan=2)

# Placeholder for Lakeshore temperature control section
tk.Label(root, text="Lakeshore Temperature Control:").grid(row=11, column=0, columnspan=3)

# Create UI components for Lakeshore temperature reading
lakeshore_controls = []
lakeshore_controls.append(tk.Label(root, text="Current Temperature:"))
lakeshore_controls[-1].grid(row=12, column=0, sticky="e")
lakeshore_controls.append(tk.Label(root, textvariable=current_temp_var, state='disabled'))
lakeshore_controls[-1].grid(row=12, column=1)

lakeshore_controls.append(tk.Label(root, text="Update Interval (s):"))
lakeshore_controls[-1].grid(row=13, column=0, sticky="e")
lakeshore_controls.append(tk.Entry(root, textvariable=update_interval_var, state='disabled'))
lakeshore_controls[-1].grid(row=13, column=1)

tk.Button(root, text="Update Interval", command=update_temp_interval, state='disabled').grid(row=14, column=0, columnspan=2)

# Update COM ports on startup
update_com_ports()

# Start Tkinter event loop
root.mainloop()

# Ensure any open serial connections are closed when the application exits
if 'ser_dpc' in globals() and ser_dpc:
    ser_dpc.close()
if 'lakeshore' in globals() and lakeshore:
    lakeshore.close()
